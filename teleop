import pyspacemouse
import time
import threading
import numpy as np

try:
    from mujoco_ar import MujocoARConnector
except:
    print("[teleoperation]: Warning, mujoco_ar is not installed. Install if you want to teleop with phone.")

try:
    from oculus_reader.reader import OculusReader
except:
    print("[teleoperation]: Warning, oculus_reader is not installed. Install if you want to use VR.")

"""
ref: https://github.com/UT-Austin-RobIn/telemoma/blob/main/telemoma/human_interface/spacemouse.py
"""
import numpy as np
from scipy.spatial.transform import Rotation as R



### Conversions ###
def quat_to_euler(quat, degrees=False):
    euler = R.from_quat(quat).as_euler("xyz", degrees=degrees)
    return euler


def euler_to_quat(euler, degrees=False):
    return R.from_euler("xyz", euler, degrees=degrees).as_quat()


def rmat_to_euler(rot_mat, degrees=False):
    euler = R.from_matrix(rot_mat).as_euler("xyz", degrees=degrees)
    return euler


def euler_to_rmat(euler, degrees=False):
    return R.from_euler("xyz", euler, degrees=degrees).as_matrix()


def rmat_to_quat(rot_mat, degrees=False):
    quat = R.from_matrix(rot_mat).as_quat()
    return quat


def quat_to_rmat(quat, degrees=False):
    return R.from_quat(quat).as_matrix()


### Subtractions ###
def quat_diff(target, source):
    result = R.from_quat(target) * R.from_quat(source).inv()
    return result.as_quat()


def angle_diff(target, source, degrees=False):
    target_rot = R.from_euler("xyz", target, degrees=degrees)
    source_rot = R.from_euler("xyz", source, degrees=degrees)
    result = target_rot * source_rot.inv()
    return result.as_euler("xyz")


def pose_diff(target, source, degrees=False):
    lin_diff = np.array(target[:3]) - np.array(source[:3])
    rot_diff = angle_diff(target[3:6], source[3:6], degrees=degrees)
    result = np.concatenate([lin_diff, rot_diff])
    return result


### Additions ###
def add_quats(delta, source):
    result = R.from_quat(delta) * R.from_quat(source)
    return result.as_quat()


def add_angles(delta, source, degrees=False):
    delta_rot = R.from_euler("xyz", delta, degrees=degrees)
    source_rot = R.from_euler("xyz", source, degrees=degrees)
    new_rot = delta_rot * source_rot
    return new_rot.as_euler("xyz", degrees=degrees)


def add_poses(delta, source, degrees=False):
    lin_sum = np.array(delta[:3]) + np.array(source[:3])
    rot_sum = add_angles(delta[3:6], source[3:6], degrees=degrees)
    result = np.concatenate([lin_sum, rot_sum])
    return result


### MISC ###
def change_pose_frame(pose, frame, degrees=False):
    R_frame = euler_to_rmat(frame[3:6], degrees=degrees)
    R_pose = euler_to_rmat(pose[3:6], degrees=degrees)
    t_frame, t_pose = frame[:3], pose[:3]
    euler_new = rmat_to_euler(R_frame @ R_pose, degrees=degrees)
    t_new = R_frame @ t_pose + t_frame
    result = np.concatenate([t_new, euler_new])
    return result

def run_threaded_command(command, args=(), daemon=True):
    thread = threading.Thread(target=command, args=args, daemon=daemon)
    thread.start()
    return thread
class FakeData:
    def __init__(self):
        self.x = 0.0
        self.y = 0.0
        self.z = 0.0
        self.roll = 0.0
        self.pitch = 0.0
        self.yaw = 0.0

class SpaceMouse:
    def __init__(self,position_scaling = 1.0, rotation_scaling=1.0,deadzone=(0.0,0.0,0.0,0.0,0.0,0.0)):
        self.position_scaling = position_scaling
        self.rotation_scaling = rotation_scaling
        if np.issubdtype(type(deadzone), np.number):
            deadzone = np.full(6, fill_value=deadzone, dtype=np.float32)
        else:
            deadzone = np.array(deadzone, dtype=np.float32)
        assert (deadzone >= 0).all()
        self.deadzone = deadzone

        self.reset()
        assert pyspacemouse.open(button_callback=self._button_callback)
        # assert pyspacemouse.open(dof_callback=pyspacemouse.print_state, button_callback=pyspacemouse.print_buttons)
        thread = threading.Thread(target=self.update_internal_data,args=(), daemon=True)
        thread.start()

    def reset(self):
        self.gripper_command = 1.0
        self.actions = np.zeros(6)
        self.done = False
        
    def _button_callback(self, _, buttons) -> None:
        """
        Callback function for space mouse button press
        """
        if buttons[0]:
            # left button pressed, switch controlling part
            if not self.done:
                self.done = True
                print("[teleoperation]: Done")

        elif buttons[1]:
            # right button pressed, switch gripper open/close state if we are controlling one
            self.gripper_command *= -1.0
            print(f"Grasp {self.gripper_command}")

    def update_internal_data(self) -> None:
        """
        Thread that stores the the spacemouse input to self.data
        """
        while True:
            self.data = pyspacemouse.read()
            # self.data = FakeData()
            if self.data:
                self.actions[:3] = np.array(       
                    [self.data.y, self.data.x, self.data.z]
                ) #* self.position_scaling
                self.actions[3:6] = np.array(
                    [self.data.roll, self.data.pitch, -self.data.yaw]
                ) #* self.rotation_scaling
            is_dead = (-self.deadzone < self.actions) & (self.actions < self.deadzone)
            self.actions[is_dead] = 0
            self.actions[:3] *=self.position_scaling
            self.actions[3:] *=self.rotation_scaling
            time.sleep(0.001)

    def get_action(self):
        """
        Get the action of a body part
        """
        return self.actions
    def get_gripper_command(self):
        return self.gripper_command
    def get_done_flag(self):
        return self.done

class Phone:
    def __init__(self, port = None):
        if port is None:
            self.connector = MujocoARConnector()
        else:
            self.connector = MujocoARConnector(port=port)
        self.connector.start()
        self.reset()
        # connector.pause_updates()  # Temporarily stops receiving updates from the connected device.
        # connector.resume_updates() # Resumes receiving updates from the connected device.
        # connector.reset_position() # Resets the current position as the origin (0,0,0).
        # data = connector.get_latest_data()
        thread = threading.Thread(target=self.update_internal_data,args=(), daemon=True)
        thread.start()
    def update_internal_data(self):
        while True:
            if self.check_if_connected():
                self.data = self.connector.get_latest_data()
                if self.data['rotation'] is not None:
                    self.rotation[:] = self.data['rotation']
                    self.translation[:]=self.data['position']
                    self.gripper_command = -1.0 if self.data['toggle'] else 1
                    self.done = self.data['button'] or self.done # latch. If done, only reset will flip it back
            time.sleep(0.005)
    def check_if_connected(self):
        return len(self.connector.connected_clients)>0
    def reset(self):
        self.rotation = np.zeros((3,3))
        self.translation = np.zeros(3)
        self.gripper_command = 1.0
        self.done = False
    def get_action(self):
        """
        Get the action of a body part
        """
        return (self.rotation, self.translation)
    def get_gripper_command(self):
        return self.gripper_command
    def get_done_flag(self):
        return self.done

def vec_to_reorder_mat(vec):
    X = np.zeros((len(vec), len(vec)))
    for i in range(X.shape[0]):
        ind = int(abs(vec[i])) - 1
        X[i, ind] = np.sign(vec[i])
    return X


# class VRPolicy:
#     def __init__(
#         self,
#         right_controller: bool = True,
#         max_lin_vel: float = 1,
#         max_rot_vel: float = 1,
#         max_gripper_vel: float = 1,
#         spatial_coeff: float = 1,
#         pos_action_gain: float = 5,
#         rot_action_gain: float = 2,
#         gripper_action_gain: float = 3,
#         rmat_reorder: list = [-2, -1, -3, 4],
#     ):
#         self.oculus_reader = OculusReader()
#         self.vr_to_global_mat = np.eye(4)
#         self.max_lin_vel = max_lin_vel
#         self.max_rot_vel = max_rot_vel
#         self.max_gripper_vel = max_gripper_vel
#         self.spatial_coeff = spatial_coeff
#         self.pos_action_gain = pos_action_gain
#         self.rot_action_gain = rot_action_gain
#         self.gripper_action_gain = gripper_action_gain
#         self.global_to_env_mat = vec_to_reorder_mat(rmat_reorder)
#         self.controller_id = "r" if right_controller else "l"
#         self.reset_orientation = True
#         self.reset_state()

#         # Start State Listening Thread #
#         run_threaded_command(self._update_internal_state)

#     def reset_state(self):
#         self._state = {
#             "poses": {},
#             "buttons": {"A": False, "B": False},
#             "movement_enabled": False,
#             "controller_on": True,
#         }
#         self.update_sensor = True
#         self.reset_origin = True
#         self.robot_origin = None
#         self.vr_origin = None
#         self.vr_state = None

#     def _update_internal_state(self, num_wait_sec=5, hz=50):
#         last_read_time = time.time()
#         while True:
#             # Regulate Read Frequency #
#             time.sleep(1 / hz)

#             # Read Controller
#             time_since_read = time.time() - last_read_time
#             poses, buttons = self.oculus_reader.get_transformations_and_buttons()
#             self._state["controller_on"] = time_since_read < num_wait_sec
#             if poses == {}:
#                 continue

#             """
#             Our own logic.
#             - If gripper button is pressed, record the current transformation, this is now zero.
#             - For now triggers can be close/open gripper.
#             - A is success,
#             - B is failure
#             - joystick maybe we use this for gripper instead?
#             - x dual mode
#             - y antipodal mode.
#             - left joystick?

#             Ideally we can utilize haptic later.
            
#             """

#             # Determine Control Pipeline #
#             toggled = self._state["movement_enabled"] != buttons["RG"]
#             self.update_sensor = self.update_sensor or buttons["RG"]
#             self.reset_orientation = self.reset_orientation or buttons["RJ"]
#             self.reset_origin = self.reset_origin or toggled

#             # Save Info #
#             self._state["poses"] = poses
#             self._state["buttons"] = buttons
#             self._state["movement_enabled"] = buttons["RG"]
#             self._state["controller_on"] = True
#             last_read_time = time.time()

#             # Update Definition Of "Forward" #
#             stop_updating = self._state["buttons"]["RJ"] or self._state["movement_enabled"]
#             if self.reset_orientation:
#                 rot_mat = np.asarray(self._state["poses"][self.controller_id])
#                 if stop_updating:
#                     self.reset_orientation = False
#                 # try to invert the rotation matrix, if not possible, then just use the identity matrix                
#                 try:
#                     rot_mat = np.linalg.inv(rot_mat) # why is this a thing?? why not transpose??
#                 except:
#                     print(f"exception for rot mat: {rot_mat}")
#                     rot_mat = np.eye(4)
#                     self.reset_orientation = True
#                 self.vr_to_global_mat = rot_mat


#     def _process_reading(self):
#         rot_mat = np.asarray(self._state["poses"][self.controller_id])
#         rot_mat = self.global_to_env_mat @ self.vr_to_global_mat @ rot_mat
#         vr_pos = self.spatial_coeff * rot_mat[:3, 3]
#         vr_quat = rmat_to_quat(rot_mat[:3, :3])
#         vr_gripper = self._state["buttons"]["rightTrig"][0]

#         self.vr_state = {"pos": vr_pos, "quat": vr_quat, "gripper": vr_gripper}

#     def _limit_velocity(self, lin_vel, rot_vel, gripper_vel):
#         """Scales down the linear and angular magnitudes of the action"""
#         lin_vel_norm = np.linalg.norm(lin_vel)
#         rot_vel_norm = np.linalg.norm(rot_vel)
#         gripper_vel_norm = np.linalg.norm(gripper_vel)
#         if lin_vel_norm > self.max_lin_vel:
#             lin_vel = lin_vel * self.max_lin_vel / lin_vel_norm
#         if rot_vel_norm > self.max_rot_vel:
#             rot_vel = rot_vel * self.max_rot_vel / rot_vel_norm
#         if gripper_vel_norm > self.max_gripper_vel:
#             gripper_vel = gripper_vel * self.max_gripper_vel / gripper_vel_norm
#         return lin_vel, rot_vel, gripper_vel

#     def _calculate_action(self, state_dict, include_info=False):
#         # Read Sensor #
#         if self.update_sensor:
#             self._process_reading()
#             self.update_sensor = False

#         # Read Observation
#         robot_pos = np.array(state_dict["cartesian_position"][:3])
#         robot_euler = state_dict["cartesian_position"][3:]
#         robot_quat = euler_to_quat(robot_euler)
#         robot_gripper = state_dict["gripper_position"]

#         # Reset Origin On Release #
#         if self.reset_origin:
#             self.robot_origin = {"pos": robot_pos, "quat": robot_quat}
#             self.vr_origin = {"pos": self.vr_state["pos"], "quat": self.vr_state["quat"]}
#             self.reset_origin = False

#         # Calculate Positional Action #
#         robot_pos_offset = robot_pos - self.robot_origin["pos"]
#         target_pos_offset = self.vr_state["pos"] - self.vr_origin["pos"]
#         pos_action = target_pos_offset - robot_pos_offset

#         # Calculate Euler Action #
#         robot_quat_offset = quat_diff(robot_quat, self.robot_origin["quat"])
#         target_quat_offset = quat_diff(self.vr_state["quat"], self.vr_origin["quat"])
#         quat_action = quat_diff(target_quat_offset, robot_quat_offset)
#         euler_action = quat_to_euler(quat_action)

#         # Calculate Gripper Action #
#         gripper_action = self.vr_state["gripper"] - robot_gripper

#         # Calculate Desired Pose #
#         target_pos = pos_action + robot_pos
#         target_euler = add_angles(euler_action, robot_euler)
#         target_cartesian = np.concatenate([target_pos, target_euler])
#         target_gripper = self.vr_state["gripper"]

#         # Scale Appropriately #
#         pos_action *= self.pos_action_gain
#         euler_action *= self.rot_action_gain
#         gripper_action *= self.gripper_action_gain
#         lin_vel, rot_vel, gripper_vel = self._limit_velocity(pos_action, euler_action, gripper_action)

#         # Prepare Return Values #
#         info_dict = {"target_cartesian_position": target_cartesian, "target_gripper_position": target_gripper}
#         action = np.concatenate([lin_vel, rot_vel, [gripper_vel]])
#         action = action.clip(-1, 1)

#         # Return #
#         if include_info:
#             return action, info_dict
#         else:
#             return action

#     def get_info(self):
#         return {
#             "success": self._state["buttons"]["A"],
#             "failure": self._state["buttons"]["B"],
#             "movement_enabled": self._state["movement_enabled"],
#             "controller_on": self._state["controller_on"],
#         }

#     def forward(self, obs_dict, include_info=False):
#         if self._state["poses"] == {}:
#             action = np.zeros(7)
#             if include_info:
#                 return action, {}
#             else:
#                 return action
#         return self._calculate_action(obs_dict["robot_state"], include_info=include_info)

class VR:
    def __init__(
        self,
        ee_name_mapping = None,
        max_lin_vel: float = 1,
        max_rot_vel: float = 1,
        max_gripper_vel: float = 1,
        spatial_coeff: float = 1,
        pos_action_gain: float = 5,
        rot_action_gain: float = 2,
        gripper_action_gain: float = 3,
        rmat_reorder: list = [-2, -1, -3, 4],
        gripper_button_sensitivity = 0.5 # if 1.0, then fully pressed means on
    ):
        if ee_name_mapping is None:
            ee_name_mapping = {
                'r': 'r',
                'l': 'l'
            }
        self.ee_name_mapping = ee_name_mapping
        self.oculus_reader = OculusReader()
        self.vr_to_global_mat = {
            'l': np.eye(4),
            'r': np.eye(4)
        }
        self._action_lock_guard = threading.Lock()
        self._reset_origin_lock_guard = threading.Lock()
        self.max_lin_vel = max_lin_vel
        self.max_rot_vel = max_rot_vel
        self.max_gripper_vel = max_gripper_vel
        self.spatial_coeff = spatial_coeff
        self.pos_action_gain = pos_action_gain
        self.rot_action_gain = rot_action_gain
        self.gripper_action_gain = gripper_action_gain
        self.global_to_env_mat = vec_to_reorder_mat(rmat_reorder)
        self.controller_ids = ["r","l"]
        self.gripper_button_sensitivity = gripper_button_sensitivity

        self.reset()

        # Start State Listening Thread #
        run_threaded_command(self._update_internal_state)

    def reset(self):
        self._state = {
            "poses": {},
            "buttons": {"A": False, "B": False,"X": False, "Y": False},
            "movement_enabled": {'r': False, 'l': False},
            "controller_on": {'r': True,'l': True},
        }
        self.update_sensor = {'r': True,'l': True}
        self.reset_origin = {'r': True,'l': True}
        self.reset_origin_external = {'r': True,'l': True}
        self.robot_origin = {'r': None,'l': None}
        self.vr_origin = {'r': None,'l': None}
        self.vr_state = {'r': None,'l': None}
        self.reset_orientation = {'r': True,'l': True}
        self.success_flag = False
        self.fail_flag = False
        self.x_toggle = False
        self.x_toggle_prev_time = 0.0
        self.y_toggle = False
        self.y_toggle_prev_time = 0.0
        self.gripper_command_map = {'r': 1.0,'l': 1.0}
        self.either_grip = False

    def _update_internal_state(self, num_wait_sec=5, hz=50):
        last_read_time = time.time()
        while True:
            # Regulate Read Frequency #
            time.sleep(1 / hz)

            # Read Controller
            time_since_read = time.time() - last_read_time
            poses, buttons = self.oculus_reader.get_transformations_and_buttons()
            self._state["controller_on"] = time_since_read < num_wait_sec
            if poses == {}:
                continue

            """
            Our own logic.
            - If gripper button is pressed, record the current transformation, this is now zero.
            - For now triggers can be close/open gripper.
            - A is success,
            - B is failure
            - joystick maybe we use this for gripper instead?
            - x dual mode
            - y antipodal mode.
            - left joystick?

            Ideally we can utilize haptic later.

            'A': False, 'B': False, 'RThU': False, 'RJ': False, 'RG': False, 'RTr': False, 'X': False, 'Y': False, 'LThU': False, 'LJ': False, 'LG': False, 'LTr': False, 'rightJS': (...), 'rightTrig': (...), 'rightGrip': (...), 'leftJS': (...), 'leftTrig': (...), 'leftGrip': (...)}, 'movement_enabled': False, 'controller_on': True
            
            """
            
            # Save Info #
            self._state["poses"] = poses
            self._state["buttons"] = buttons

            self.success_flag = self.success_flag or self._state["buttons"]["A"]
            self.fail_flag = self.fail_flag or self._state["buttons"]["B"]
            DEBOUNCE_TIME = 0.5
            if self._state["buttons"]["X"] and time.time()-self.x_toggle_prev_time > DEBOUNCE_TIME:
                self.x_toggle_prev_time = time.time()
                self.x_toggle = not self.x_toggle
            if self._state["buttons"]["Y"] and time.time()-self.y_toggle_prev_time > DEBOUNCE_TIME:
                self.y_toggle_prev_time = time.time()
                self.y_toggle = not self.y_toggle
            gripper_button_names = {
                'r': "rightGrip",
                'l': "leftGrip"
            }
            # gripper_names = {
            #     'r': "RG",
            #     'l': "LG"
            # }
            joystick_names = {
                'r': "RJ",
                'l': "LJ"
            }
            self.gripper_command_map['r'] = self._state['buttons']["rightTrig"][0]
            self.gripper_command_map['l'] = self._state['buttons']["leftTrig"][0]
            self.right_joystick = self._state['buttons']["rightJS"]
            self._state["controller_on"] = {}
            self.either_grip = False
            
            for controller_id in self.controller_ids:
                # Determine Control Pipeline #
                gipper_button_value = True if buttons[gripper_button_names[controller_id]][0]>self.gripper_button_sensitivity else False
                toggled = self._state["movement_enabled"][controller_id] != gipper_button_value # Need to fully press down to enable.
                self.update_sensor[controller_id] = self.update_sensor[controller_id] or gipper_button_value
                self.reset_orientation[controller_id] = self.reset_orientation[controller_id] or buttons[joystick_names[controller_id]]
                with self._reset_origin_lock_guard:
                    self.either_grip = self.either_grip or gipper_button_value
                    self.reset_origin[controller_id] = self.reset_origin[controller_id] or toggled
                    self.reset_origin_external[controller_id] = self.reset_origin_external[controller_id] or toggled
                self._state["movement_enabled"][controller_id] = gipper_button_value
                self._state["controller_on"][controller_id] = True
                last_read_time = time.time()

                # Update Definition Of "Forward" #
                stop_updating = self._state["buttons"][joystick_names[controller_id]] or self._state["movement_enabled"][controller_id]
                if self.reset_orientation[controller_id]:
                    rot_mat = np.asarray(self._state["poses"][controller_id])
                    if stop_updating:
                        self.reset_orientation[controller_id] = False
                    # try to invert the rotation matrix, if not possible, then just use the identity matrix                
                    try:
                        rot_mat = np.linalg.inv(rot_mat) # why is this a thing?? why not transpose??
                    except:
                        print(f"exception for rot mat: {rot_mat}")
                        rot_mat = np.eye(4)
                        self.reset_orientation[controller_id] = True
                    self.vr_to_global_mat[controller_id] = rot_mat
            self._calculate_action()

    def _process_reading(self,controller_id):
        trig_names = {
            "r": "rightTrig",
            "l": "leftTrig"
        }
        # for controller_id in self.controller_ids:
        rot_mat = np.asarray(self._state["poses"][controller_id])
        rot_mat = self.global_to_env_mat @ self.vr_to_global_mat[controller_id] @ rot_mat
        vr_pos = self.spatial_coeff * rot_mat[:3, 3]
        vr_quat = rmat_to_quat(rot_mat[:3, :3])
        vr_gripper = self._state["buttons"][trig_names[controller_id]][0]

        self.vr_state[controller_id] = {
            "pos": vr_pos, "quat": vr_quat, "gripper": vr_gripper
            }

    def _calculate_action(self, include_info=False):
        # Read Sensor #
        rotation_action = {}
        pos_action = {}
        for controller_id in self.controller_ids:
            if self.update_sensor[controller_id]:
                self._process_reading(controller_id)
                self.update_sensor[controller_id] = False
            # Reset Origin On Release #
            if self.reset_origin[controller_id]:
                self.vr_origin[controller_id] = {"pos": self.vr_state[controller_id]["pos"], "quat": self.vr_state[controller_id]["quat"]}
                self.reset_origin[controller_id] = False

            # Calculate Positional Action #
            target_pos_offset = self.vr_state[controller_id]["pos"] - self.vr_origin[controller_id]["pos"]
            pos_action[controller_id] = target_pos_offset

            # Calculate Euler Action #
            target_quat_offset = quat_diff(self.vr_state[controller_id]["quat"], self.vr_origin[controller_id]["quat"])
            quat_action = target_quat_offset
            rotation_action[controller_id] = quat_to_rmat(quat_action)
        with self._action_lock_guard:
            self.rotation_action = rotation_action
            self.pos_action = pos_action
    
    def get_action(self, gripper_name):
        with self._action_lock_guard:
            rotation_action = self.rotation_action[self.ee_name_mapping[gripper_name]]
            pos_action = self.pos_action[self.ee_name_mapping[gripper_name]]
        return rotation_action, pos_action
    def get_done_flag(self):
        return self.success_flag or self.fail_flag
    def get_success_flag(self):
        return self.success_flag

    def get_x(self):
        return self.x_toggle
    def get_y(self):
        return self.y_toggle
    def get_right_joystick(self):
        return self.right_joystick
    def get_gripper_command(self,gripper_name):
        return self.gripper_command_map[self.ee_name_mapping[gripper_name]]
    def get_reset_original_external(self,gripper_name):
        with self._reset_origin_lock_guard:
            return self.reset_origin_external[self.ee_name_mapping[gripper_name]]
    def set_reset_original_external(self,gripper_name,setting: bool):
        with self._reset_origin_lock_guard:
            self.reset_origin_external[self.ee_name_mapping[gripper_name]] = setting
    def get_either_gripper_pressed(self):
        with self._reset_origin_lock_guard:
            return self.either_grip


def main():
    test_vr()

def test_vr():
    vr = VR()
    while True:
        if 'r' in vr._state['poses']:
            print(f"state: {vr._state}")
            # print(f"Action: {vr.get_action('r')}")
            # print(f"Action: {vr.get_action('l')}")
        else:
            print(f"waiting: {vr._state}")
        time.sleep(0.1)
def test_phone():
    phone = Phone()
    while True:
        print(f"Action: {phone.get_action()}")
        print(f"gripper: {phone.get_gripper_command()}")
        print(f"done: {phone.get_done_flag()}")
        time.sleep(0.1)
    # while True:
    #     data = phone.connector.get_latest_data()
    #     if not phone.connector.connected_clients:
    #         print("data: ",data)
    #     # time.sleep(0.01)


def test_space_mouse():
    space_mouse = SpaceMouse()
    # space_mouse.start()
    while True:
        time.sleep(0.01)

if __name__=="__main__":
    main()
